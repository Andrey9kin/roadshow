apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'maven-publish'
apply plugin: 'jetty'

group = 'net.praqma.roadshow.buep' // FIXME - add your initials or github id here
version = '0.0.34-SNAPSHOT'

ext {
artifactoryUrlAndPort = System.properties.artifactoryUrlAndPort ?: "http://roadshowartifactory:8081/artifactory"
tomcatUrlAndPort = System.properties.tomcatUrlAndPort ?: "http://roadshowtomcatserver:8080/"
deployContext = System.properties.deployContext ?: "RC" // should be either RC or REL
deployPath = System.properties.deployPath ?: String.format("RoadShow-%s", System.properties.deployContext) // should be set to RoadShow-yourinitial
appName = System.properties.appName ?: String.format("/%s/Calculator", System.properties.deployPath)
} 

task printProps {
		doLast {
			println artifactoryUrlAndPort
			println tomcatUrlAndPort
			println deployContext
			println deployPath
			println appName
		}
}


description = """"""

sourceCompatibility = 1.6
targetCompatibility = 1.6

def repositoryUrl(name) {
    System.properties.artifactoryUrlAndPort + "/libs-${name}-local"
}

repositories {
    jcenter()
}

dependencies {
    compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version:'2.26.0'
    compile group: 'org.seleniumhq.selenium', name: 'selenium-server', version:'2.28.0'
    compile group: 'javax.servlet', name: 'javax.servlet-api', version:'3.0.1'
    compile group: 'junit', name: 'junit', version:'4.7'
}

jacoco {
    toolVersion = "0.7.1.201405082137"
}

test {
    filter {
        includeTestsMatching "net.praqma.roadshow.unit.*"
   }
}

// Modified test task to use on Jenkins so test results
// are seen as new, even though gradle is to smart to run
// the tasks again. The Jenkins JUnit plugin fails the build
// if test results are not new, eg. when building manually.
task jenkinstest {
		description "Same as test task, but renews timestamp on junit xml files. For use on Jenkins"
		dependsOn test
    doLast {
        def timestamp = System.currentTimeMillis()
        fileTree(dir: "${buildDir}/test-results/", include: "TEST*.xml").each {
            it.lastModified = timestamp 
        }
    }
}       

stopPort = 4455
stopKey = 'stop'

task startApp(type: JettyRunWar) {
    daemon = true
}

task functionalTestTomcat(type: Test) {
		systemProperties(appName: appName, tomcatUrlAndPort: tomcatUrlAndPort)
    filter {
        includeTestsMatching "net.praqma.roadshow.functional.*"
    }
}

task functionalTest(type: Test) {
    dependsOn startApp
    filter {
        includeTestsMatching "net.praqma.roadshow.functional.*"
    }
    finalizedBy jettyStop
}

checkstyle {
    ignoreFailures = true
}

findbugs {
    toolVersion = "3.0.1"
    ignoreFailures = true
}

publishing {
    repositories {
        maven {
            url repositoryUrl("snapshot")
        }
    }
    publications {
        roadShow(MavenPublication) {
            artifact war
        }
    }
}

configurations {
  // Configuration for artifacts deployed to Tomcat
  deployables
}

// display caching for snapshot version 
configurations.deployables.resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

dependencies {
  deployables "${group}:${name}:${version}"
}

// TODO too many hardcoded values

task deploy(type: Copy) {
  description "Retrieve the war from repository and deploy to Tomcat"
  group "Web application"

  from (configurations.deployables) { rename { "roadshow.war" } }
  into '/tmp/tomcat/webapps'
}

task deployWar(type: Copy) {
  description "Deploy the war to Tomcat"
  group "Web application"

  from (war) { rename { "roadshow.war" } }
  into '/tmp/tomcat/webapps'
}
